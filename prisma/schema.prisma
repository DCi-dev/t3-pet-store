generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
enum Role {
  ADMIN
  USER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_at Int? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role     Role       @default(USER)
  accounts Account[]
  sessions Session[]
  wishlist Wishlist[]
  Cart     Cart[]
  Order    Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Shop
model Category {
  id          String    @id @default(cuid())
  name        String
  description String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           String         @id @default(cuid())
  name         String
  description  String
  price        Int
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String
  size         ProductSize[]
  image        ProductImage[]
  published    Boolean        @default(false)
  inStock      Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  WishlistItem WishlistItem[]
  CartItem     CartItem[]
  OrderItem    OrderItem[]

  @@index([categoryId])
}

model ProductSize {
  id        String   @id @default(cuid())
  productId String
  size      SizeType @default(S)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum SizeType {
  S
  M
  L
  XL
  XXL
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  productId String
  product   WishlistItem[]
  userId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model WishlistItem {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  quantity   Int      @default(1)

  @@index([productId])
  @@index([wishlistId])
}

model Cart {
  id        String     @id @default(cuid())
  productId String
  cartItems CartItem[]
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model CartItem {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)

  @@index([productId])
  @@index([cartId])
}

model Order {
  id          String       @id @default(cuid())
  orderItems  OrderItem[]
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  OrderDetail OrderDetail?

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity  Int     @default(1)

  @@index([productId])
  @@index([orderId])
}

model OrderDetail {
  id         String  @id @default(cuid())
  adress     String
  phone      String
  city       String
  country    String
  postalCode String
  orderId    String  @unique
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  paid       Boolean @default(false)
  fulfilled  Boolean @default(false)
}
