generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
enum Role {
  ADMIN
  USER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_at Int? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role     Role      @default(USER)
  accounts Account[]
  sessions Session[]

  Adress       Address[]
  // Wishlist     Wishlist[]
  Cart         Cart[]
  Order        Order[]
  WishlistItem WishlistItem[]
  CartItem     CartItem[]
  OrderItem    OrderItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Shop
model Address {
  id         String  @id @default(cuid())
  address    String
  phone      String
  city       String
  country    String
  postalCode String
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order      Order[]

  @@index([userId])
}

// model Wishlist {
//   id       String         @id @default(cuid())
//   userId   String
//   user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
//   products WishlistItem[]

//   @@index([userId])
// }

model WishlistItem {
  id        String @id @default(cuid())
  productId String
  // wishlistId String
  // wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@index([wishlistId])
  @@index([userId])
}

model Cart {
  id       String     @id @default(cuid())
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products CartItem[]

  @@index([userId])
}

model CartItem {
  id        String @id @default(cuid())
  productId String
  cartId    String
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([userId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  OrderItem[]
  address   Address     @relation(fields: [addressId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    OrderState  @default(NEW)
  total     Float
  addressId String

  @@index([addressId])
  @@index([userId])
}

enum OrderState {
  NEW
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String @id @default(cuid())
  productId String
  orderId   String
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float

  @@index([orderId])
  @@index([userId])
}
