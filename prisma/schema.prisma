generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
enum Role {
  ADMIN
  USER
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  refresh_token_expires_at Int? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role     Role      @default(USER)
  accounts Account[]
  sessions Session[]

  Adress           Address[]
  stripeCustomerId String? // link to Stripe customer object in Stripe's system
  Order            Order[]
  WishlistItem     WishlistItem[]
  CartItem         CartItem[]
  OrderItem        OrderItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Shop
model Address {
  id         String  @id @default(cuid())
  address    String
  phone      String
  city       String
  country    String
  postalCode String
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order      Order[]

  @@index([userId])
}

model WishlistItem {
  id        String @id @default(cuid())
  productId String
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CartItem {
  id          String       @id @default(cuid())
  productId   String
  userId      String
  productName String
  image       String?
  quantity    Int
  size        SizeOption[]
  flavor      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SizeOption {
  id         String   @id @default(cuid())
  size       String
  price      Int
  key        String
  cartItemId String
  CartItem   CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade)

  @@index([cartItemId])
}

model Order {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products        OrderItem[]
  address         Address          @relation(fields: [addressId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  status          String?
  total           Float
  addressId       String
  checkoutSession CheckoutSession?
  stripeChargeId  String?
  shippingMethod  String?
  trackingNumber  String?
  shippingCost    Int?
  paymentMethod   String?
  cardDetails     cardDetails?

  @@index([addressId])
  @@index([userId])
}

model cardDetails {
  id           String @id @default(cuid())
  cardBrand    String
  cardLast4    String
  cardExpYear  String
  cardExpMonth String
  orderId      String @unique
  Order        Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model OrderItem {
  id           String                @id @default(cuid())
  productId    String
  orderId      String
  order        Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId       String
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity     Int
  productImage OrderItemImage[]
  productName  String
  flavor       String
  size         OrderItemSizeOption[]

  @@index([orderId])
  @@index([userId])
}

model OrderItemImage {
  id          String    @id @default(cuid())
  ref         String
  orderItemId String
  OrderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([orderItemId])
}

model OrderItemSizeOption {
  id          String    @id @default(cuid())
  size        String
  price       Int
  key         String
  orderItemId String
  OrderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([orderItemId])
}

// Stripe Checkout
model CheckoutSession {
  id                String   @id @default(cuid())
  checkoutSessionId String   @unique
  apiVersion        String?
  data              Json
  request           Json?
  type              String
  object            String
  account           String?
  created           DateTime
  status            String?
  amount            Int?
  currency          String
  livemode          Boolean?
  pendingWebhooks   Int?
  orderId           String   @unique
  order             Order    @relation(references: [id], fields: [orderId], onDelete: Cascade)
}
